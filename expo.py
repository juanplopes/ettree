import math, numpy

data = """
200	0.00E+00	0	0.0791015625	0.6630859375	0.9228515625	0.984375	0.99609375	1
400	0	0	0.01171875	0.3828125	0.8623046875	0.978515625	0.9951171875	0.9990234375
600	0.00E+00	0	0	0.2646484375	0.7900390625	0.953125	0.98828125	1
800	0.00E+00	0	0	0.138671875	0.7060546875	0.9365234375	0.9873046875	0.99609375
1000	0.00E+00	0.00E+00	0	0.0966796875	0.6484375	0.9296875	0.9921875	0.998046875
1200	0.00E+00	0.00E+00	0.00E+00	0.060546875	0.59375	0.9091796875	0.9814453125	0.998046875
1400	0	0.00E+00	0	3.81E-02	0.5703125	0.8974609375	0.9765625	0.9970703125
1600	0	0.00E+00	0.00E+00	0.025390625	0.4921875	0.8798828125	0.98828125	0.9990234375
1800	0.00E+00	0.00E+00	0	0.0146484375	0.470703125	0.8701171875	0.9853515625	0.998046875
2000	0	0.00E+00	0	0.005859375	0.4111328125	0.82421875	0.9658203125	0.9921875
2200	0	0	0	0.0029296875	0.3798828125	0.8369140625	0.9658203125	0.994140625
2400	0.00E+00	0	0	0.001953125	0.328125	0.7880859375	0.95703125	0.9931640625
2600	0	0.00E+00	0	9.77E-04	0.3203125	0.7998046875	0.9521484375	0.990234375
2800	0	0.00E+00	0	0	0.275390625	0.7890625	0.9423828125	0.9912109375
3000	0	0.00E+00	0	0	0.2451171875	0.7646484375	0.951171875	0.990234375
3200	0	0.00E+00	0	0	0.2373046875	0.744140625	0.94921875	0.98828125
3400	0	0.00E+00	0	0	0.205078125	0.7548828125	0.95703125	0.994140625
3600	0	0.00E+00	0	0	0.2197265625	0.7578125	0.951171875	0.9912109375
3800	0	0.00E+00	0	0	0.181640625	0.7548828125	0.9541015625	0.9921875
4000	0	0.00E+00	0	0	0.1787109375	0.728515625	0.94140625	0.9912109375
4200	0	0.00E+00	0.00E+00	0	0.1572265625	0.712890625	0.9375	0.990234375
4400	0	0.00E+00	0	0	0.13671875	0.712890625	0.9287109375	0.9921875
4600	0	0.00E+00	0	0	0.146484375	0.6943359375	0.927734375	0.984375
4800	0	0.00E+00	0.00E+00	0	0.1220703125	0.69140625	0.9306640625	0.984375
5000	0	0.00E+00	0	0.00E+00	0.1220703125	0.6552734375	0.91796875	0.98046875
5200	0	0.00E+00	0.00E+00	0	0.0986328125	0.6484375	0.900390625	0.9814453125
5400	0	0	0.00E+00	0.00E+00	0.078125	0.6396484375	0.9130859375	0.9794921875
5600	0	0.00E+00	0.00E+00	0	0.08984375	0.6240234375	0.9130859375	0.9775390625
5800	0	0.00E+00	0.00E+00	0	0.0703125	0.603515625	0.9013671875	0.98046875
6000	0	0	0.00E+00	0	0.060546875	0.5732421875	0.8876953125	0.98046875
6200	0	0.00E+00	0.00E+00	0.00E+00	0.0654296875	0.5703125	0.908203125	0.98828125
6400	0	0.00E+00	0.00E+00	0	0.0654296875	0.5869140625	0.8896484375	0.9775390625
6600	0	0	0.00E+00	0	0.04296875	0.564453125	0.8876953125	0.982421875
6800	0	0	0.00E+00	0	0.0390625	0.548828125	0.8759765625	0.978515625
7000	0	0	0.00E+00	0	0.0390625	0.5341796875	0.876953125	0.9775390625
7200	0	0	0.00E+00	0	0.041015625	0.509765625	0.8857421875	0.9814453125
7400	0	0	0	0	0.03125	0.5205078125	0.8720703125	0.9833984375
7600	0	0	0.00E+00	0	0.044921875	0.51171875	0.8759765625	0.98046875
7800	0.00E+00	0	0	0	0.044921875	0.513671875	0.8798828125	0.9794921875
8000	0	0.00E+00	0	0	0.0322265625	0.474609375	0.875	0.978515625
8200	0.00E+00	0	0	0	0.0302734375	0.474609375	0.865234375	0.974609375
8400	0.00E+00	0	0	0	0.021484375	0.4755859375	0.8603515625	0.9794921875
8600	0.00E+00	0	0	0	0.0234375	0.44921875	0.8701171875	0.978515625
8800	0.00E+00	0	0	0	0.021484375	0.4404296875	0.869140625	0.98046875
9000	0	0.00E+00	0	0	0.0166015625	0.4599609375	0.8681640625	0.97265625
9200	0.00E+00	0	0	0	0.0146484375	0.435546875	0.869140625	0.97265625
9400	0.00E+00	0.00E+00	0	0	0.017578125	0.412109375	0.8525390625	0.9677734375
9600	0	0.00E+00	0	0	0.0166015625	0.4267578125	0.8447265625	0.9638671875
9800	0	0	0	0	0.0078125	0.419921875	0.8466796875	0.9677734375
10000	0	0.00E+00	0	0	0.0146484375	0.4404296875	0.853515625	0.9765625														
"""
data = [line.split('\t') for line in data.split('\n') if line.strip() != '']
X = [int(line[0]) for line in data]
YS = [[float(data[j][i]) for j in range(len(X))] for i in range(1, len(data[0]))]

def test(X, Y, a):
    try:
        err = 0
        for x, y in zip(X, Y):
            v = math.exp(-a*x)
            err += (v - y)**2
        return err
    except OverflowError:
        return float('Inf')
        
def search(f, left, right, absolutePrecision):
    if abs(right - left) < absolutePrecision:
        return (left + right)/2

    leftThird = (2*left + right)/3
    rightThird = (left + 2*right)/3

    if f(leftThird) > f(rightThird):
        return search(f, leftThird, right, absolutePrecision) 
    else:
        return search(f, left, rightThird, absolutePrecision)


def f(X, Y):
    return search(lambda a: test(X, Y, a), 0.0, 1.0, 1e-8)
    
K = range(3, len(YS)+1)
V = [f(X, Y) for Y in YS[2:]]

R = numpy.polyfit(K, numpy.log(V), 1, w=numpy.sqrt(V))
R[1] = math.exp(R[1])
print R
print math.exp(-R[1]), '\t', math.exp(R[0])

for k, v in zip(K, V):
    print k, '\t', v, '\t', R[1]*math.exp(k*R[0])


    
    

